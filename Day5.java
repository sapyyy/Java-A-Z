class Animals {
    String name;
    int legs;
    int tail;
    int eyes;

    public void eating() {
        System.out.println(name + "is eating");
        // 10000 lines
    }
}

class Box {
    int length;
    int breadth;

    // this is generated by the compiler whenever
    // user don't mention the constructor
    //    public Box(){}

    // default constructor
    public Box() {
        length = 0;
        breadth = 0;
        System.out.println("The default constructor is called");
    }

    // parameterized constructor
    public Box(int l, int b) {
        length = l;
        breadth = b;
        System.out.println("The parameterized constructor is called");
    }

    // method to display the box length breadth
    public void display() {
        System.out.println("The length of the box is : "+length);
        System.out.println("The breadth of the box is : "+breadth);
    }

    // method to take some values from the parameter
    public void displayParameter(int a, int b) {
        System.out.println(a);
        System.out.println(b);
    }
}

//Day5.main(); -> JVM Call

public class Day5 {
    int a = 10; // instance variable = non static variable

    public static void main(String[] args) {
        int a = 5; // local variable
        int share = 10;
//        System.out.println(a);

        // non - primitive reference
        Animals cat1 = new Animals();
        Animals cat3 = new Animals();
        Animals cat4 = new Animals();
        cat1.name = "Meow";
        cat1.eyes = 2;
        cat1.tail = 1;
        cat1.legs = 4;

        System.out.println(cat1.name);
        System.out.println(cat1.eyes);
        System.out.println(cat1.tail);
        System.out.println(cat1.legs);

        Animals cat2 = cat1; // copied the reference of cat1 to cat2

        cat1.name = "Meow Meow";

        System.out.println(cat2.name); // Meow Meow

        // code redundancy
        System.out.println(cat1.name + "is eating");
        System.out.println(cat2.name + "is eating");
        System.out.println(cat3.name + "is eating");
        System.out.println(cat4.name + "is eating");

        cat1.eating();
        cat2.eating();
        cat3.eating();
        cat4.eating();

        // creating objects of box
        Box box1 = new Box(); // default constructor
        box1.display();
        box1.displayParameter(10, 20);

        Box box2 = new Box(20, 50); // parameterized constructor
        box2.display();
    }
}
